//** version v0.3
#include <iostream>
#include <vector>

using namespace std;

// ** 1. 데이터 추가 (새로운 공간 확보)
// ** 2. 데이터 삭제 (배열에서는 실제로 삭제하려고 생성하지는 않는다.)
   //데이터를 불러올때나 텍스쳐를 불러올때 주로 쓰인다.
// ** 3. 데이터를 삽입할 수 있는 공간의 크기
// ** 4. 현재 삽입되어있는 원소의 개수
// ** 5. 컨테이너(뭔가를 담아내기 위한 공간)의 시작 지점
// ** 6. 컨테이너의 종료 지점

//  0 0000000 = 0
//  0 0000001 = 1
//  0 0000010 = 2
//  0 0000011 = 3
//  0 0000100 = 4
//  0 0000101 = 5
//  0 0000110 = 6
//  0 0000111 = 7
//  0 0001000 = 8
//  0 0001001 = 9
//  0 0001010 = 10
//  0 0001011 = 11
//  0 0001100 = 12
//  0 0001101 = 13
//  0 0001110 = 14
//  0 0001111 = 15
//  0 0010000 = 16
//  .
//  .
//  .
//  .
//  0 1111111 = 127 + 1
//  1 0000000 = -1


//   0 0010000 = 16
// - 0 0000110 = 6
//-----------------
// (16 - 6 = 16 + (-6))  
//
// ** 2의 보수 시작
// 0 0 0 0 0 1 1 0 = 6
// 1 1 1 1 1 1 1 1
// -------------------
// 1 1 1 1 1 0 0 1 + 1
// 11111001 + 1
// 11111010 = - 6
// 
//   00010000 = 16
// + 11111010 = -6
// -------------------
//   00001010
//   00001010 = 10
// 
//   0 00000110


//** 원소의 개수
int Size = 0;

//** 컨테이너
int* Vector = nullptr;

void push_back(const int& _Value);


int main(void)
{
	push_back(100);
	// 복제를 안하고 더 큰 범위의 벡터에 추가로 넣을 시 쓰레기 값이 나온다.

	push_back(200);


	for (int i = 0; i < Size; ++i)
		cout << Vector[i] << endl;


	return 0;
}

void push_back(const int& _Value)
{

	if (Size <= 0)
	{
		++Size;
		int* _Vector = new int[Size];
		_Vector[Size - 1] = _Value;
	}
	else
	{
		++Size;
		int* Temp = new int[Size];

		for (int i = 0; i < Size; ++i)
			Temp[1] = Vector[i];

		delete Vector;
		Vector = nullptr;

		Temp[Size - 1] = _Value;
		Vector = Temp;
	}
}